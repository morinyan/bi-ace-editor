// Generated from Expr.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('../antlr4/index');



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\u0019\u00a2\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0007\u0005@\n\u0005",
    "\f\u0005\u000e\u0005C\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005H\n\u0005\f\u0005\u000e\u0005K\u000b\u0005\u0003\u0005\u0005",
    "\u0005N\n\u0005\u0003\u0006\u0006\u0006Q\n\u0006\r\u0006\u000e\u0006",
    "R\u0003\u0007\u0006\u0007V\n\u0007\r\u0007\u000e\u0007W\u0003\u0007",
    "\u0003\u0007\u0007\u0007\\\n\u0007\f\u0007\u000e\u0007_\u000b\u0007",
    "\u0003\b\u0006\bb\n\b\r\b\u000e\bc\u0003\b\u0003\b\u0003\t\u0003\t\u0003",
    "\t\u0007\tk\n\t\f\t\u000e\tn\u000b\t\u0003\t\u0003\t\u0003\n\u0003\n",
    "\u0003\n\u0005\nu\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0002\u0002\u001c\u0003\u0003\u0005",
    "\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u0002",
    "\u0015\u0002\u0017\u0002\u0019\u000b\u001b\f\u001d\r\u001f\u000e!\u000f",
    "#\u0010%\u0011\'\u0012)\u0013+\u0014-\u0015/\u00161\u00173\u00185\u0019",
    "\u0003\u0002\n\u0006\u0002&&C\\aac|\u0007\u0002&&2;C\\aac|\u0004\u0002",
    "$$^^\u0003\u00022;\u0005\u0002\u000b\f\u000f\u000f\"\"\u0004\u0002)",
    ")^^\u000b\u0002$$))11^^ddhhppttvv\u0005\u00022;CHch\u0002\u00a9\u0002",
    "\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002",
    "\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002",
    "\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002",
    "\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002",
    "\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002",
    "\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002",
    "!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003",
    "\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002",
    "\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002",
    "\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002",
    "\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u0003",
    "7\u0003\u0002\u0002\u0002\u00059\u0003\u0002\u0002\u0002\u0007;\u0003",
    "\u0002\u0002\u0002\tM\u0003\u0002\u0002\u0002\u000bP\u0003\u0002\u0002",
    "\u0002\rU\u0003\u0002\u0002\u0002\u000fa\u0003\u0002\u0002\u0002\u0011",
    "g\u0003\u0002\u0002\u0002\u0013q\u0003\u0002\u0002\u0002\u0015v\u0003",
    "\u0002\u0002\u0002\u0017|\u0003\u0002\u0002\u0002\u0019~\u0003\u0002",
    "\u0002\u0002\u001b\u0080\u0003\u0002\u0002\u0002\u001d\u0082\u0003\u0002",
    "\u0002\u0002\u001f\u0084\u0003\u0002\u0002\u0002!\u0086\u0003\u0002",
    "\u0002\u0002#\u0088\u0003\u0002\u0002\u0002%\u008a\u0003\u0002\u0002",
    "\u0002\'\u008c\u0003\u0002\u0002\u0002)\u008e\u0003\u0002\u0002\u0002",
    "+\u0091\u0003\u0002\u0002\u0002-\u0093\u0003\u0002\u0002\u0002/\u0096",
    "\u0003\u0002\u0002\u00021\u0099\u0003\u0002\u0002\u00023\u009c\u0003",
    "\u0002\u0002\u00025\u009f\u0003\u0002\u0002\u000278\u0007*\u0002\u0002",
    "8\u0004\u0003\u0002\u0002\u00029:\u0007+\u0002\u0002:\u0006\u0003\u0002",
    "\u0002\u0002;<\u0007.\u0002\u0002<\b\u0003\u0002\u0002\u0002=A\t\u0002",
    "\u0002\u0002>@\t\u0003\u0002\u0002?>\u0003\u0002\u0002\u0002@C\u0003",
    "\u0002\u0002\u0002A?\u0003\u0002\u0002\u0002AB\u0003\u0002\u0002\u0002",
    "BN\u0003\u0002\u0002\u0002CA\u0003\u0002\u0002\u0002DI\u0007$\u0002",
    "\u0002EH\u0005\u0013\n\u0002FH\n\u0004\u0002\u0002GE\u0003\u0002\u0002",
    "\u0002GF\u0003\u0002\u0002\u0002HK\u0003\u0002\u0002\u0002IG\u0003\u0002",
    "\u0002\u0002IJ\u0003\u0002\u0002\u0002JL\u0003\u0002\u0002\u0002KI\u0003",
    "\u0002\u0002\u0002LN\u0007$\u0002\u0002M=\u0003\u0002\u0002\u0002MD",
    "\u0003\u0002\u0002\u0002N\n\u0003\u0002\u0002\u0002OQ\t\u0005\u0002",
    "\u0002PO\u0003\u0002\u0002\u0002QR\u0003\u0002\u0002\u0002RP\u0003\u0002",
    "\u0002\u0002RS\u0003\u0002\u0002\u0002S\f\u0003\u0002\u0002\u0002TV",
    "\t\u0005\u0002\u0002UT\u0003\u0002\u0002\u0002VW\u0003\u0002\u0002\u0002",
    "WU\u0003\u0002\u0002\u0002WX\u0003\u0002\u0002\u0002XY\u0003\u0002\u0002",
    "\u0002Y]\u00070\u0002\u0002Z\\\t\u0005\u0002\u0002[Z\u0003\u0002\u0002",
    "\u0002\\_\u0003\u0002\u0002\u0002][\u0003\u0002\u0002\u0002]^\u0003",
    "\u0002\u0002\u0002^\u000e\u0003\u0002\u0002\u0002_]\u0003\u0002\u0002",
    "\u0002`b\t\u0006\u0002\u0002a`\u0003\u0002\u0002\u0002bc\u0003\u0002",
    "\u0002\u0002ca\u0003\u0002\u0002\u0002cd\u0003\u0002\u0002\u0002de\u0003",
    "\u0002\u0002\u0002ef\b\b\u0002\u0002f\u0010\u0003\u0002\u0002\u0002",
    "gl\u0007)\u0002\u0002hk\u0005\u0013\n\u0002ik\n\u0007\u0002\u0002jh",
    "\u0003\u0002\u0002\u0002ji\u0003\u0002\u0002\u0002kn\u0003\u0002\u0002",
    "\u0002lj\u0003\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002mo\u0003\u0002",
    "\u0002\u0002nl\u0003\u0002\u0002\u0002op\u0007)\u0002\u0002p\u0012\u0003",
    "\u0002\u0002\u0002qt\u0007^\u0002\u0002ru\t\b\u0002\u0002su\u0005\u0015",
    "\u000b\u0002tr\u0003\u0002\u0002\u0002ts\u0003\u0002\u0002\u0002u\u0014",
    "\u0003\u0002\u0002\u0002vw\u0007w\u0002\u0002wx\u0005\u0017\f\u0002",
    "xy\u0005\u0017\f\u0002yz\u0005\u0017\f\u0002z{\u0005\u0017\f\u0002{",
    "\u0016\u0003\u0002\u0002\u0002|}\t\t\u0002\u0002}\u0018\u0003\u0002",
    "\u0002\u0002~\u007f\u0007/\u0002\u0002\u007f\u001a\u0003\u0002\u0002",
    "\u0002\u0080\u0081\u0007#\u0002\u0002\u0081\u001c\u0003\u0002\u0002",
    "\u0002\u0082\u0083\u0007`\u0002\u0002\u0083\u001e\u0003\u0002\u0002",
    "\u0002\u0084\u0085\u0007,\u0002\u0002\u0085 \u0003\u0002\u0002\u0002",
    "\u0086\u0087\u00071\u0002\u0002\u0087\"\u0003\u0002\u0002\u0002\u0088",
    "\u0089\u0007\'\u0002\u0002\u0089$\u0003\u0002\u0002\u0002\u008a\u008b",
    "\u0007-\u0002\u0002\u008b&\u0003\u0002\u0002\u0002\u008c\u008d\u0007",
    ">\u0002\u0002\u008d(\u0003\u0002\u0002\u0002\u008e\u008f\u0007>\u0002",
    "\u0002\u008f\u0090\u0007?\u0002\u0002\u0090*\u0003\u0002\u0002\u0002",
    "\u0091\u0092\u0007@\u0002\u0002\u0092,\u0003\u0002\u0002\u0002\u0093",
    "\u0094\u0007@\u0002\u0002\u0094\u0095\u0007?\u0002\u0002\u0095.\u0003",
    "\u0002\u0002\u0002\u0096\u0097\u0007?\u0002\u0002\u0097\u0098\u0007",
    "?\u0002\u0002\u00980\u0003\u0002\u0002\u0002\u0099\u009a\u0007#\u0002",
    "\u0002\u009a\u009b\u0007?\u0002\u0002\u009b2\u0003\u0002\u0002\u0002",
    "\u009c\u009d\u0007(\u0002\u0002\u009d\u009e\u0007(\u0002\u0002\u009e",
    "4\u0003\u0002\u0002\u0002\u009f\u00a0\u0007~\u0002\u0002\u00a0\u00a1",
    "\u0007~\u0002\u0002\u00a16\u0003\u0002\u0002\u0002\u000e\u0002AGIMR",
    "W]cjlt\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function ExprLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

ExprLexer.prototype = Object.create(antlr4.Lexer.prototype);
ExprLexer.prototype.constructor = ExprLexer;

Object.defineProperty(ExprLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

ExprLexer.EOF = antlr4.Token.EOF;
ExprLexer.T__0 = 1;
ExprLexer.T__1 = 2;
ExprLexer.T__2 = 3;
ExprLexer.IDENTIFIER = 4;
ExprLexer.LONG = 5;
ExprLexer.DOUBLE = 6;
ExprLexer.WS = 7;
ExprLexer.STRING = 8;
ExprLexer.MINUS = 9;
ExprLexer.NOT = 10;
ExprLexer.POW = 11;
ExprLexer.MUL = 12;
ExprLexer.DIV = 13;
ExprLexer.MODULO = 14;
ExprLexer.PLUS = 15;
ExprLexer.LT = 16;
ExprLexer.LEQ = 17;
ExprLexer.GT = 18;
ExprLexer.GEQ = 19;
ExprLexer.EQ = 20;
ExprLexer.NEQ = 21;
ExprLexer.AND = 22;
ExprLexer.OR = 23;

ExprLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

ExprLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

ExprLexer.prototype.literalNames = [ null, "'('", "')'", "','", null, null, 
                                     null, null, null, "'-'", "'!'", "'^'", 
                                     "'*'", "'/'", "'%'", "'+'", "'<'", 
                                     "'<='", "'>'", "'>='", "'=='", "'!='", 
                                     "'&&'", "'||'" ];

ExprLexer.prototype.symbolicNames = [ null, null, null, null, "IDENTIFIER", 
                                      "LONG", "DOUBLE", "WS", "STRING", 
                                      "MINUS", "NOT", "POW", "MUL", "DIV", 
                                      "MODULO", "PLUS", "LT", "LEQ", "GT", 
                                      "GEQ", "EQ", "NEQ", "AND", "OR" ];

ExprLexer.prototype.ruleNames = [ "T__0", "T__1", "T__2", "IDENTIFIER", 
                                  "LONG", "DOUBLE", "WS", "STRING", "ESC", 
                                  "UNICODE", "HEX", "MINUS", "NOT", "POW", 
                                  "MUL", "DIV", "MODULO", "PLUS", "LT", 
                                  "LEQ", "GT", "GEQ", "EQ", "NEQ", "AND", 
                                  "OR" ];

ExprLexer.prototype.grammarFileName = "Expr.g4";


exports.ExprLexer = ExprLexer;

